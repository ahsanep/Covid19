{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","newT","setNew","results","setResult","searchCountry","setSearchCountry","useEffect","axios","all","get","then","res","console","log","data","catch","err","date1","Date","toLocaleDateString","countries","filter","items","country","includes","map","datas","i","Card","bg","text","className","Img","variant","src","countryInfo","flag","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","CardDeck","Footer","style","margin","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","target","value","queries","columns","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fd4c2f4.chunk.js","sourcesContent":["import React,{useEffect, useState}from \"react\"\nimport './App.css';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\n// import CardColumns from \"react-bootstrap/CardColumns\";\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\"\n\nfunction App() {\n\nconst [newT,setNew] = useState([])\nconst [results,setResult] = useState([]);\nconst [searchCountry,setSearchCountry] = useState(\"\")\n\nuseEffect(()=>{\n  axios\n  .all([\n    axios.get(\"https://corona.lmao.ninja/v2/all\"),\n    axios.get(\"https://corona.lmao.ninja/v2/countries?sort=country\")\n  ])\n  \n  .then(res => {   \n  \n  console.log(res[1].data)\n    setNew(res[0].data);\n    setResult(res[1].data)\n  })\n  .catch(err => {\n    console.log(err);\n  })\n},[]);\n\nconst date1 = new Date().toLocaleDateString();\n\nconst filterCountries = results.filter(items => {\n  return searchCountry !==\"\" ? items.country.includes(searchCountry) :items\n})\n\nconst countries = filterCountries.map((datas,i)=> \n  {\n    return(\n     \n      <Card bg=\"light\" text=\"dark\" className=\"text-center p-3\" key ={i}>\n       <Card.Img variant=\"top\" src={datas.countryInfo.flag} />\n        <Card.Body>\n          <Card.Title>{datas.country}</Card.Title>\n          <Card.Text>CASES {datas.cases}</Card.Text>\n          <Card.Text>DEATHS {datas.deaths}</Card.Text>\n          <Card.Text>RECOVERED {datas.recovered}</Card.Text>\n          <Card.Text>TODAYS CASES {datas.todayCases}</Card.Text>\n          <Card.Text>TODAYS DEATH {datas.todayDeaths}</Card.Text>\n          <Card.Text>ACTIVE {datas.active}</Card.Text>\n          <Card.Text>CRICTICAL {datas.critical}</Card.Text>\n        </Card.Body>\n        </Card>\n    );\n  } \n);\nvar queries = [{\n  columns: 2,\n  query: 'min-width: 500px'\n}, {\n  columns: 3,\n  query: 'min-width: 1000px'\n}];\n\n  return (\n    <div >\n     <CardDeck>\n  <Card bg=\"secondary\" text=\"white\" className=\"text-center p-3\">\n \n    <Card.Body>\n      <Card.Title>CASES</Card.Title>\n      <Card.Text>\n         {newT.cases}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small >Last updated {date1}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"success\" \n  text=\"white\" \n  className=\"text-center p-3\"\n  style={{margin : \"10 px\"}}>\n    \n     <Card.Body>\n      <Card.Title> DEATHS  </Card.Title>\n      <Card.Text>\n       {newT.deaths}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {date1}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"danger\" text=\"white\" className=\"text-center p-3\" style={{margin : \"10 px\"}}>\n   \n    <Card.Body>\n      <Card.Title>RECOVERED</Card.Title>\n      <Card.Text>\n      {newT.recovered}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small >Last updated {date1}</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<Form>\n  <Form.Group controlId=\"formGroupEmail\">\n  <Form.Label>Search</Form.Label> \n    <Form.Control type=\"text\" placeholder=\"Enter country\" \n    onChange={e => setSearchCountry(e.target.value)}/>\n  \n  </Form.Group>\n\n</Form>\n<Columns  \nqueries={queries}>{countries}</Columns>    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}